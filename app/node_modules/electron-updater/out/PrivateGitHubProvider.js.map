{
  "version": 3,
  "file": "PrivateGitHubProvider.js",
  "sourceRoot": "",
  "sources": [
    "../src/PrivateGitHubProvider.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { session } from \"electron\"\nimport { HttpError, request } from \"electron-builder-http\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\nimport { GithubOptions, UpdateInfo } from \"electron-builder-http/out/publishOptions\"\nimport { RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { parse as parseUrl } from \"url\"\nimport { FileInfo, formatUrl, getChannelFilename, getCurrentPlatform, getDefaultChannelName } from \"./api\"\nimport { NET_SESSION_NAME } from \"./electronHttpExecutor\"\nimport { validateUpdateInfo } from \"./GenericProvider\"\nimport { BaseGitHubProvider } from \"./GitHubProvider\"\n\nexport interface PrivateGitHubUpdateInfo extends UpdateInfo {\n  assets: Array<Asset>\n}\n\nexport class PrivateGitHubProvider extends BaseGitHubProvider<PrivateGitHubUpdateInfo> {\n  private readonly netSession = session.fromPartition(NET_SESSION_NAME)\n\n  constructor(options: GithubOptions, private readonly token: string) {\n    super(options, \"api.github.com\")\n\n    this.registerHeaderRemovalListener()\n  }\n  \n  async getLatestVersion(): Promise<PrivateGitHubUpdateInfo> {\n    const basePath = this.basePath\n    const cancellationToken = new CancellationToken()\n    const channelFile = getChannelFilename(getDefaultChannelName())\n    \n    const assets = await this.getLatestVersionInfo(basePath, cancellationToken)\n    const requestOptions = Object.assign({\n      headers: this.configureHeaders(\"application/octet-stream\"),\n      session: this.netSession\n    }, parseUrl(assets.find(it => it.name == channelFile)!.url))\n    let result: any\n    try {\n      result = await request<UpdateInfo>(requestOptions, cancellationToken)\n\n      if (typeof result === \"string\") {\n        if (getCurrentPlatform() === \"darwin\") {\n          result = JSON.parse(result)\n        }\n        else {\n          result = safeLoad(result)\n        }\n      }\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${formatUrl(<any>requestOptions)}): ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    validateUpdateInfo(result)\n    if (getCurrentPlatform() === \"darwin\") {\n      result.releaseJsonUrl = `${this.options.protocol || \"https\"}://${this.options.host || \"api.github.com\"}${requestOptions.path}`\n    }\n    (<PrivateGitHubUpdateInfo>result).assets = assets\n    return result\n  }\n\n  private registerHeaderRemovalListener(): void {\n    const filter = {\n      urls: [\"*://*.amazonaws.com/*\"]\n    }\n\n    this.netSession.webRequest.onBeforeSendHeaders(filter, (details: any, callback: any) => {\n      if (details.requestHeaders.Authorization != null) {\n        delete details.requestHeaders.Authorization\n      }\n\n      callback({cancel: false, requestHeaders: details.requestHeaders})\n    })\n  }\n\n  private configureHeaders(accept: string) {\n    return Object.assign({\n      Accept: accept,\n      Authorization: `token ${this.token}`,\n    }, this.requestHeaders)\n  }\n  \n  private async getLatestVersionInfo(basePath: string, cancellationToken: CancellationToken): Promise<Array<Asset>> {\n    const requestOptions: RequestOptions = Object.assign({\n      path: `${basePath}/latest`,\n      headers: this.configureHeaders(\"application/vnd.github.v3+json\"),\n    }, this.baseUrl)\n    try {\n      return (await request<any>(requestOptions, cancellationToken)).assets\n    }\n    catch (e) {\n      throw new Error(`Unable to find latest version on GitHub (${formatUrl(<any>requestOptions)}), please ensure a production release exists: ${e.stack || e.message}`)\n    }\n  }\n\n  private get basePath() {\n    return `/repos/${this.options.owner}/${this.options.repo}/releases`\n  }\n\n  async getUpdateFile(versionInfo: PrivateGitHubUpdateInfo): Promise<FileInfo> {\n    const headers = {\n      Accept: \"application/octet-stream\",\n      Authorization: `token ${this.token}`\n    }\n    \n    // space is not supported on GitHub\n    if (getCurrentPlatform() === \"darwin\") {\n      const info = <any>versionInfo\n      const name = info.url.split(\"/\").pop()\n      const assetPath = parseUrl(versionInfo.assets.find(it => it.name == name)!.url).path\n      info.url = formatUrl(Object.assign({path: `${assetPath}`}, this.baseUrl))\n      info.headers = headers\n      return info\n    }\n    else {\n      const name = versionInfo.githubArtifactName || path.posix.basename(versionInfo.path).replace(/ /g, \"-\")\n      return <any>{\n        name: name,\n        url: versionInfo.assets.find(it => it.name == name)!.url,\n        sha2: versionInfo.sha2,\n        headers: headers,\n        session: this.netSession\n      }\n    }\n  }\n}\n\nexport interface Asset {\n  name: string\n  url: string\n}"
  ]
}

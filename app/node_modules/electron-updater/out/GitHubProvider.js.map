{
  "version": 3,
  "file": "GitHubProvider.js",
  "sourceRoot": "",
  "sources": [
    "../src/GitHubProvider.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAS,AAAE,AAAO,AAAE,AAAM,AAAuB;;;;;;AAC1D,AAAO,AAAE,AAAiB,AAAE,AAAM,AAA6C;;;;;;AAC/E,AAAO,AAAiB,AAAS,AAAc,AAAM,AAA0C;;;;AAE/F,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAK,AAAI,AAAQ,AAAE,AAAM,AAAK;;;;;;AACvC,AAAO,AAAY,AAAS,AAAE,AAAkB,AAAE,AAAkB,AAAE,AAAqB,AAAE,AAAQ,AAAE,AAAM,AAAO;;;;;;AACpH,AAAO,AAAE,AAAkB,AAAE,AAAM,AAAmB,AAEtD,AAAM;;;;;;MAAyD,AAAQ,AAAW;AAIhF,gBAA+B,AAAsB,SAAE,AAAgB;AACrE,AAAK,AAAE;AADsB,aAAO,UAAP,AAAO,AAAe;AAGnD,cAAM,AAAO,UAAG,AAAQ,AAAC,oCAAG,AAAO,QAAC,AAAQ,YAAI,AAAO,aAAM,AAAO,QAAC,AAAI,QAAI,AAAQ,QAAE,AAAC;AACxF,AAAI,aAAC,AAAO;AACV,AAAQ,sBAAE,AAAO,QAAC,AAAQ;AAC1B,AAAQ,sBAAE,AAAO,QAAC,AAAQ;AAC1B,AAAI,kBAAO,AAAO,QAAC,AAAI,AACxB,AACH;AALiB;AAKhB,AACF,AAED,AAAM;;;MAAsB,uBAAQ,AAA8B;AAChE,gBAA+B,AAAsB;AACnD,AAAK,cAAC,AAAO,SAAE,AAAY,AAAC;AADC,aAAO,UAAP,AAAO,AAAe,AAErD;AAAC;AAEK,AAAgB,oBAAtB,AAAK;;;;AACH,kBAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAC9B,kBAAM,AAAiB,oBAAG,AAAI,AAAiB,AAAE;AACjD,kBAAM,AAAO,UAAG,MAAM,AAAI,MAAC,AAAsB,uBAAC,AAAQ,UAAE,AAAiB,AAAC;AAC9E,gBAAI,AAAW;AACf,kBAAM,AAAW,cAAG,AAAkB,8CAAC,AAAqB,AAAE,AAAC;AAC/D,kBAAM,AAAc,iBAAG,AAAM,OAAC,AAAM,OAAC,EAAC,AAAI,MAAE,AAAI,MAAC,AAAmB,oBAAC,AAAO,SAAE,AAAW,AAAC,cAAE,AAAO,SAAE,AAAI,MAAC,AAAc,kBAAI,AAAS,AAAC,aAAE,AAAI,MAAC,AAAO,AAAC;AACrJ,gBAAI,AAAC;AACH,AAAM,yBAAG,MAAM,AAAO,mEAAa,AAAc,gBAAE,AAAiB,AAAC,AACvE;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,AAAY,AAAS,gFAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAC5D,0BAAM,IAAI,AAAK,AAAC,qBAAe,AAAW,gDAAqC,AAAS,qCAAM,AAAc,AAAC,qBAAM,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AAC5I;AAAC;AACD,sBAAM,AAAC,AACT;AAAC;AAED,AAAkB,kFAAC,AAAM,AAAC;AAC1B,AAAE,AAAC,gBAAC,AAAkB,AAAE,oDAAK,AAAQ,AAAC,UAAC,AAAC;AACtC,AAAM,uBAAC,AAAc,AAAG,oBAAG,AAAS,2DAAC,AAAI,MAAC,AAAO,AAAC,YAAI,AAAc,eAAC,AAAI,IAAE,AAC7E;AAAC;AACD,AAAM,mBAAC,AAAM,AACf;;AAAC;AAEa,AAAsB,0BAA5B,AAAK,CAAwB,AAAgB,UAAE,AAAoC;;;;AACzF,kBAAM,AAAc,wBAA0B,AAAM;AAClD,AAAI,AAAE,yBAAG,AAAQ,QAAS;AAC1B,AAAO,yBAAE,AAAM,OAAC,AAAM,OAAC,EAAC,AAAM,QAAE,AAAkB,AAAC,sBAAE,AAAI,OAAC,AAAc,AAAC,AAC1E;AAHoD,aAAd,AAAM,EAG1C,AAAI,OAAC,AAAO,AAAC;AAChB,gBAAI,AAAC;AACH,AAAgC;AAChC,sBAAM,AAAW,AAAG,cAAC,MAAM,AAAO,mEAAoB,AAAc,gBAAE,AAAiB,AAAC,AAAC;AACzF,AAAM,uBAAE,AAAW,YAAC,AAAQ,SAAC,AAAU,WAAC,AAAG,AAAC,AAAC,IAAtC,GAAyC,AAAW,YAAC,AAAQ,SAAC,AAAS,UAAC,AAAC,AAAC,KAAG,AAAW,YAAC,AAAQ,AAC1G;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,sBAAM,IAAI,AAAK,AAAC,kDAA4C,AAAS,qCAAM,AAAc,AAAC,gEAAiD,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AACpK;AAAC,AACH;;AAAC;AAED,QAAY,AAAQ;AAClB,AAAM,AAAC,mBAAI,AAAI,KAAC,AAAO,QAAC,AAAK,SAAI,AAAI,KAAC,AAAO,QAAC,AAAI,IAAW,AAC/D;AAAC;AAEK,AAAa,iBAAnB,AAAK,CAAe,AAAuB;;;;AACzC,AAAE,AAAC,gBAAC,AAAkB,AAAE,oDAAK,AAAQ,AAAC,UAAC,AAAC;AACtC,AAAM,uBAAM,AAAW,AACzB;AAAC;AAED,AAAmC;AACnC,kBAAM,AAAI,OAAG,AAAW,YAAC,AAAkB,sBAAI,AAAI,MAAC,AAAK,MAAC,AAAQ,SAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAO,QAAC,AAAI,MAAE,AAAG,AAAC;AACvG,AAAM;AACJ,AAAI,sBAAE,AAAI;AACV,AAAG,qBAAE,AAAS,qCAAC,AAAM,OAAC,AAAM,OAAC,EAAC,AAAI,MAAE,AAAI,OAAC,AAAmB,oBAAC,AAAW,YAAC,AAAO,SAAE,AAAI,AAAC,AAAC,SAAE,AAAI,OAAC,AAAO,AAAC,AAAC;AACxG,AAAI,sBAAE,AAAW,YAAC,AAAI,AACvB,AACH;AALS;;AAKR;AAEO,AAAmB,wBAAC,AAAe,SAAE,AAAgB;AAC3D,AAAM,AAAC,kBAAG,AAAI,KAAC,AAAQ,qBAAa,AAAI,KAAC,AAAO,QAAC,AAAgB,qBAAK,AAAK,QAAG,AAAE,KAAG,AAAG,MAAG,AAAO,WAAI,AAAQ,QAAE,AAChH;AAAC,AACF",
  "sourcesContent": [
    "import { HttpError, request } from \"electron-builder-http\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\nimport { GithubOptions, githubUrl, UpdateInfo } from \"electron-builder-http/out/publishOptions\"\nimport { RequestOptions } from \"http\"\nimport * as path from \"path\"\nimport { parse as parseUrl } from \"url\"\nimport { FileInfo, formatUrl, getChannelFilename, getCurrentPlatform, getDefaultChannelName, Provider } from \"./api\"\nimport { validateUpdateInfo } from \"./GenericProvider\"\n\nexport abstract class BaseGitHubProvider<T extends UpdateInfo> extends Provider<T> {\n  // so, we don't need to parse port (because node http doesn't support host as url does)\n  protected readonly baseUrl: RequestOptions\n  \n  constructor(protected readonly options: GithubOptions, baseHost: string) {\n    super()\n\n    const baseUrl = parseUrl(`${options.protocol || \"https\"}://${options.host || baseHost}`)\n    this.baseUrl = {\n      protocol: baseUrl.protocol,\n      hostname: baseUrl.hostname,\n      port: <any>baseUrl.port,\n    }\n  }\n}\n\nexport class GitHubProvider extends BaseGitHubProvider<UpdateInfo> {\n  constructor(protected readonly options: GithubOptions) {\n    super(options, \"github.com\")\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const basePath = this.basePath\n    const cancellationToken = new CancellationToken()\n    const version = await this.getLatestVersionString(basePath, cancellationToken)\n    let result: any\n    const channelFile = getChannelFilename(getDefaultChannelName())\n    const requestOptions = Object.assign({path: this.getBaseDownloadPath(version, channelFile), headers: this.requestHeaders || undefined}, this.baseUrl)\n    try {\n      result = await request<UpdateInfo>(requestOptions, cancellationToken)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${formatUrl(<any>requestOptions)}): ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    validateUpdateInfo(result)\n    if (getCurrentPlatform() === \"darwin\") {\n      result.releaseJsonUrl = `${githubUrl(this.options)}/${requestOptions.path}`\n    }\n    return result\n  }\n\n  private async getLatestVersionString(basePath: string, cancellationToken: CancellationToken): Promise<string> {\n    const requestOptions: RequestOptions = Object.assign({\n      path: `${basePath}/latest`,\n      headers: Object.assign({Accept: \"application/json\"}, this.requestHeaders)\n    }, this.baseUrl)\n    try {\n      // do not use API to avoid limit\n      const releaseInfo = (await request<GithubReleaseInfo>(requestOptions, cancellationToken))\n      return (releaseInfo.tag_name.startsWith(\"v\")) ? releaseInfo.tag_name.substring(1) : releaseInfo.tag_name\n    }\n    catch (e) {\n      throw new Error(`Unable to find latest version on GitHub (${formatUrl(<any>requestOptions)}), please ensure a production release exists: ${e.stack || e.message}`)\n    }\n  }\n\n  private get basePath() {\n    return `/${this.options.owner}/${this.options.repo}/releases`\n  }\n\n  async getUpdateFile(versionInfo: UpdateInfo): Promise<FileInfo> {\n    if (getCurrentPlatform() === \"darwin\") {\n      return <any>versionInfo\n    }\n\n    // space is not supported on GitHub\n    const name = versionInfo.githubArtifactName || path.posix.basename(versionInfo.path).replace(/ /g, \"-\")\n    return {\n      name: name,\n      url: formatUrl(Object.assign({path: this.getBaseDownloadPath(versionInfo.version, name)}, this.baseUrl)),\n      sha2: versionInfo.sha2,\n    }\n  }\n  \n  private getBaseDownloadPath(version: string, fileName: string) {\n    return `${this.basePath}/download/${this.options.vPrefixedTagName === false ? \"\" : \"v\"}${version}/${fileName}`\n  }\n}\n\ninterface GithubReleaseInfo {\n  readonly tag_name: string\n}"
  ]
}

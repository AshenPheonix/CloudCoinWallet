{
  "version": 3,
  "file": "BintrayProvider.js",
  "sourceRoot": "",
  "sources": [
    "../src/BintrayProvider.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAS,AAAE,AAAM,AAAuB;;;;;;AACjD,AAAO,AAAE,AAAa,AAAE,AAAM,AAAmC;;;;;;AACjE,AAAO,AAAE,AAAiB,AAAE,AAAM,AAA6C;;;;;;AAE/E,AAAO,AAAY,AAAQ,AAAE,AAAM,AAAO,AAE1C,AAAM;;;;MAAuB,AAAQ,AAAqB;AAGxD,gBAAY,AAA6B;AACvC,AAAK,AAAE;AAEP,AAAI,aAAC,AAAM,SAAG,AAAI,AAAa,gDAAC,AAAa,eAAE,AAAI,AAAiB,AAAE,AAAC,AACzE;AAAC;AAEK,AAAgB,oBAAtB,AAAK;;;;AACH,gBAAI,AAAC;AACH,sBAAM,AAAI,OAAG,MAAM,AAAI,MAAC,AAAM,OAAC,AAAU,WAAC,AAAS,AAAC;AACpD,AAAM;AACJ,AAAO,6BAAE,AAAI,KAAC,AAAI,AACnB,AACH;AAHS;AAGR,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAU,cAAI,AAAC,KAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AACrD,0BAAM,IAAI,AAAK,AAAC,wIAAkI,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AAC3K;AAAC;AACD,sBAAM,AAAC,AACT;AAAC,AACH;;AAAC;AAEK,AAAa,iBAAnB,AAAK,CAAe,AAAwB;;;;AAC1C,gBAAI,AAAC;AACH,sBAAM,AAAK,QAAG,MAAM,AAAI,OAAC,AAAM,OAAC,AAAe,gBAAC,AAAW,YAAC,AAAO,AAAC;AACpE,sBAAM,AAAM,AAAG,YAAG,AAAW,YAAC,AAAO,OAAM;AAC3C,sBAAM,AAAI,aAAS,AAAI;AAAC,AAAE,2BAAI,AAAE,GAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,WAAI,AAAE,GAAC,AAAI,KAAC,AAAQ,QAAC,AAAO,AAAC,AAAC;iBAAvE,AAAK,WAA4E,AAAI;AAAC,AAAE,2BAAI,AAAE,GAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,AAAC;iBAA1C,AAAK,WAA+C,AAAI;AAAC,AAAE,2BAAI,AAAE,GAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,AAAC;iBAA1C,AAAK;AAC3I,AAAE,AAAC,oBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAuC;AACvC,0BAAM,IAAI,AAAK,AAAC,+CAAyC,AAAW,YAAC,AAAO,eAAQ,AAAI,KAAC,AAAS,UAAC,AAAK,OAAE,AAAI,MAAE,AAAC,AAAC,EAAE,AAAC,AACvH;AAAC;AAED,AAAM;AACJ,AAAI,0BAAE,AAAI,KAAC,AAAI;AACf,AAAG,AAAE,mDAA0B,AAAI,OAAC,AAAM,OAAC,AAAK,SAAI,AAAI,OAAC,AAAM,OAAC,AAAI,QAAI,AAAI,KAAC,AAAI,IAAE;AACnF,AAAI,0BAAE,AAAI,KAAC,AAAM,AAClB,AACH;AALS;AAKR,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,AAAY,AAAS,gFAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAC5D,0BAAM,IAAI,AAAK,AAAC,wIAAkI,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AAC3K;AAAC;AACD,sBAAM,AAAC,AACT;AAAC,AACH;;AAAC,AACF",
  "sourcesContent": [
    "import { HttpError } from \"electron-builder-http\"\nimport { BintrayClient } from \"electron-builder-http/out/bintray\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\nimport { BintrayOptions, VersionInfo } from \"electron-builder-http/out/publishOptions\"\nimport { FileInfo, Provider } from \"./api\"\n\nexport class BintrayProvider extends Provider<VersionInfo> {\n  private client: BintrayClient\n\n  constructor(configuration: BintrayOptions) {\n    super()\n\n    this.client = new BintrayClient(configuration, new CancellationToken())\n  }\n\n  async getLatestVersion(): Promise<VersionInfo> {\n    try {\n      const data = await this.client.getVersion(\"_latest\")\n      return {\n        version: data.name,\n      }\n    }\n    catch (e) {\n      if (\"response\" in e && e.response.statusCode === 404) {\n        throw new Error(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`)\n      }\n      throw e\n    }\n  }\n\n  async getUpdateFile(versionInfo: VersionInfo): Promise<FileInfo> {\n    try {\n      const files = await this.client.getVersionFiles(versionInfo.version)\n      const suffix = `${versionInfo.version}.exe`\n      const file = files.find(it => it.name.endsWith(suffix) && it.name.includes(\"Setup\")) || files.find(it => it.name.endsWith(suffix)) || files.find(it => it.name.endsWith(\".exe\"))\n      if (file == null) {\n        //noinspection ExceptionCaughtLocallyJS\n        throw new Error(`Cannot find suitable file for version ${versionInfo.version} in: ${JSON.stringify(files, null, 2)}`)\n      }\n\n      return {\n        name: file.name,\n        url: `https://dl.bintray.com/${this.client.owner}/${this.client.repo}/${file.name}`,\n        sha2: file.sha256,\n      }\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`No latest version, please ensure that user, package and repository correctly configured. Or at least one version is published. ${e.stack || e.message}`)\n      }\n      throw e\n    }\n  }\n}"
  ]
}

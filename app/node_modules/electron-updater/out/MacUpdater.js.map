{
  "version": 3,
  "file": "MacUpdater.js",
  "sourceRoot": "",
  "sources": [
    "../src/MacUpdater.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;AAAA,AAAO,AAAe,AAAM,AAAc;;;;;;AAI1C,AAAO,AAAE,AAAU,AAAE,AAAM,AAAc,AAGzC,AAAM;;;;;;MAAkB,AAAQ,AAAU;AAGxC,gBAAY,AAA8B;AACxC,AAAK,cAAC,AAAO,AAAC;AAHC,aAAa,gBAAgB,AAAO,QAAC,AAAU,AAAC,YAAC,AAAW;AAK3E,AAAI,aAAC,AAAa,cAAC,AAAE,GAAC,AAAO,SAAE,AAAE;AAC/B,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,qBAAC,AAAM,OAAC,AAAI,KAAC,AAAE,AAAC,AACtB;AAAC;AACD,AAAI,iBAAC,AAAI,KAAC,AAAO,SAAE,AAAE,AAAC,AACxB;AAAC,AAAC;AACF,AAAI,aAAC,AAAa,cAAC,AAAE,GAAC,AAAmB,qBAAE;AACzC,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAI,qBAAC,AAAM,OAAC,AAAI,AAAC,oBAAe,AAAI,KAAC,AAAY,YAAC,AAAO,OAAsB,AAAC,AAClF;AAAC;AACD,AAAI,iBAAC,AAAI,KAAC,AAAmB,qBAAE,AAAI,KAAC,AAAW,AAAC,AAClD;AAAC,AAAC,AACJ;AAAC;AAES,AAAiB,sBAAC,AAAwB,aAAE,AAAkB;AACtE,AAAI,aAAC,AAAa,cAAC,AAAU,WAAO,AAAY,YAAC,AAAc,gBAAE,AAAM,OAAC,AAAM,OAAC,EAAC,AAAe,iBAAE,AAAU,AAAC,cAAE,AAAI,KAAC,AAAqB,sBAAC,AAAQ,AAAC,AAAC,AAAC;AACpJ,AAAK,cAAC,AAAiB,kBAAC,AAAW,aAAE,AAAQ,AAAC,AAChD;AAAC;AAES,AAAgB,qBAAC,AAAwB,aAAE,AAAkB,UAAE,AAAoC;AAC3G,AAAI,aAAC,AAAa,cAAC,AAAe,AAAE;AACpC,AAAM,eAAC,AAAe,8CAAC,AAAO,AAAE,AAClC;AAAC;AAED,AAAc;AACZ,AAAI,aAAC,AAAa,cAAC,AAAc,AAAE,AACrC;AAAC,AACF",
  "sourcesContent": [
    "import BluebirdPromise from \"bluebird-lst\"\nimport { CancellationToken } from \"electron-builder-http/out/CancellationToken\"\nimport { PublishConfiguration, VersionInfo } from \"electron-builder-http/out/publishOptions\"\nimport { FileInfo } from \"./api\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport AutoUpdater = Electron.AutoUpdater\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  constructor(options?: PublishConfiguration) {\n    super(options)\n\n    this.nativeUpdater.on(\"error\", it => {\n      if (this.logger != null) {\n        this.logger.warn(it)\n      }\n      this.emit(\"error\", it)\n    })\n    this.nativeUpdater.on(\"update-downloaded\", () => {\n      if (this.logger != null) {\n        this.logger.info(`New version ${this.versionInfo!.version} has been downloaded`)\n      }\n      this.emit(\"update-downloaded\", this.versionInfo)\n    })\n  }\n\n  protected onUpdateAvailable(versionInfo: VersionInfo, fileInfo: FileInfo) {\n    this.nativeUpdater.setFeedURL((<any>versionInfo).releaseJsonUrl, Object.assign({\"Cache-Control\": \"no-cache\"}, this.computeRequestHeaders(fileInfo)))\n    super.onUpdateAvailable(versionInfo, fileInfo)\n  }\n\n  protected doDownloadUpdate(versionInfo: VersionInfo, fileInfo: FileInfo, cancellationToken: CancellationToken) {\n    this.nativeUpdater.checkForUpdates()\n    return BluebirdPromise.resolve()\n  }\n\n  quitAndInstall(): void {\n    this.nativeUpdater.quitAndInstall()\n  }\n}"
  ]
}
